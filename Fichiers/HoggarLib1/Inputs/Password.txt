<template>
  <div class="w-full mb-[5px]">
    <div>
      <span class="font-bold">{{ hoggarinput.hogarDataLabels[props.cle] }}</span>
    </div>

    <div class="relative">
      <!-- Champ leurre anti-autofill (invisible, avant le vrai champ) -->
      <input
        type="text"
        name="fakeuser"
        autocomplete="username"
        style="position:absolute; top:-9999px; left:-9999px; height:0; opacity:0;"
      />
      <input
        type="password"
        name="fakepass"
        autocomplete="new-password"
        style="position:absolute; top:-9999px; left:-9999px; height:0; opacity:0;"
      />

      <!-- Champ rÃ©el -->
      <input
        :type="showPassword ? 'text' : 'password'"
        class="w-full bg-[#E8E8E8] h-[50px] pr-10 border-[1px] border-[darkblue]"
        v-model="hoggarinput.hogarDataValues[props.cle]"
        :name="`hidden_${props.cle}`"
        autocomplete="off"
        @focus="disableAutofill"
        ref="realInput"
      />

      <span
        class="material-icons absolute top-1/2 right-3 transform -translate-y-1/2 cursor-pointer"
        @click="showPassword = !showPassword"
      >
        {{ showPassword ? 'visibility_off' : 'visibility' }}
      </span>
    </div>

    <div v-if="hoggarinput.errors[props.cle]" class="text-[red]">
      {{ hoggarinput.errors[props.cle] }}
    </div>
  </div>
</template>

<script setup>
import { ref } from 'vue';
import { HoggarInput } from '@/HoggarLibs/stores/hoggarinput';

const props = defineProps({
  cle: {
    type: String,
    required: true,
  },
});

const hoggarinput = HoggarInput();
const showPassword = ref(false);
const realInput = ref(null);

// Hack pour supprimer le champ du cache du navigateur
function disableAutofill() {
  if (realInput.value) {
    realInput.value.setAttribute('autocomplete', 'off');
    realInput.value.setAttribute('readonly', true);
    setTimeout(() => {
      realInput.value.removeAttribute('readonly');
    }, 200);
  }
}
</script>