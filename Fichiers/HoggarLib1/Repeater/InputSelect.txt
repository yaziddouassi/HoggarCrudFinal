<template>
    <div class="w-full mb-[5px]">
      <div>
        <span class="font-bold">
           {{hoggarinput.repeaterLines[props.cle][props.cle2][props.cle3]['label']}} 
        </span>
      </div>
  
      <div>
        <select
          class="w-full bg-[#E8E8E8] h-[50px] border-[darkblue] border-[1px]
          text-center"
          v-model="hoggarinput.hogarDataValues[props.cle][props.cle2][props.cle3]"
        >
          <option value="">-- Select --</option>
          <option
            v-for="(option,index) in hoggarinput.repeaterLines[props.cle][props.cle2][props.cle3]['contents']"
            :key="option"
            :value="option">
            {{ hoggarinput.repeaterLines[props.cle][props.cle2][props.cle3]['labels'][index] }}
          </option>
        </select>
      </div>
  
 

<div v-if="hoggarinput.errors[`${props.cle}.${props.cle2}.${props.cle3}`]" class="text-[red]">
  {{ hoggarinput.errors[`${props.cle}.${props.cle2}.${props.cle3}`] }}
</div>


    </div>
  </template>
  
  <script setup>
  import { HoggarInput } from '@/HoggarLibs/stores/hoggarinput'
  import { watch } from 'vue'

  const props = defineProps({
    cle: {
      type: String,
    },
  cle2 : {
    type :  Number
  },
  cle3 : {
    type :  String
  },

  })
  
  const hoggarinput = HoggarInput()


watch(
  () => hoggarinput.hogarDataValues[props.cle][props.cle2][props.cle3],
  (newValue) => {
    const options = hoggarinput.repeaterLines[props.cle][props.cle2][props.cle3]['contents'] || []
    if (!options.includes(newValue)) {
      hoggarinput.hogarDataValues[props.cle][props.cle2][props.cle3] = ''
    }
  },
  { immediate: true }
)


  </script>