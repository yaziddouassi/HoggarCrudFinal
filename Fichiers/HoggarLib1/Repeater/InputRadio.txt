<template>
    <div class="w-full mb-[5px]">
      <div>
        <span class="font-bold">
             {{hoggarinput.repeaterLines[props.cle][props.cle2][props.cle3]['label']}}
        </span>
      </div>
  
      <div class="space-y-2">
        <div
          v-for="(option, index) in hoggarinput.repeaterLines[props.cle][props.cle2][props.cle3]['contents']"
          :key="option"
          class="flex items-center gap-2"
        >
          <input
            type="radio"
            :id="`${props.cle}-${props.cle2}-${props.cle3}-${index}`"
            :name="`${props.cle}-${props.cle2}-${props.cle3}-${index}`"
            :value="option"
            v-model="hoggarinput.hogarDataValues[props.cle][props.cle2][props.cle3]"
            class="accent-darkblue"
          />
          <label :for="`${props.cle}-${props.cle2}-${props.cle3}-${index}`">
           {{ hoggarinput.repeaterLines[props.cle][props.cle2][props.cle3]['labels'][index] }}
          </label>
        </div>
      </div>
  

     <div v-if="hoggarinput.errors[`${props.cle}.${props.cle2}.${props.cle3}`]" class="text-[red]">
  {{ hoggarinput.errors[`${props.cle}.${props.cle2}.${props.cle3}`] }}
</div>

    </div>
  </template>
  
  <script setup>
  import { HoggarInput } from '@/HoggarLibs/stores/hoggarinput'
  
  const props = defineProps({
    cle: {
      type: String,
    },
    cle2 : {
    type :  Number
  },
  cle3 : {
    type :  String
  },
  })
  
  const hoggarinput = HoggarInput()
  </script>